import React, {useState} from 'react';
//значение, которое меняется в useState всегда содержится в хранилище react

export default {
    title: 'UseState demo',
};

const generateCount = () => {
    console.log("count")
    return 1
}

export const ExampleUseState = () => {
    console.log("ExampleUseState")
    //вот тебе функция, которую ты можешь вызвать, которая вернет результат который useMemo запомнит
    //так как в зависимости ни чего нет, то она это делает один раз.
    //так мы сделали оптимизацию, с помощью другой функции.

    //const getCount = useMemo(generateCount, [])

    //когда мы кликаем по кнопке, то на onClick срабатывает callBack, в котором вызывается setCount,
    //который нам выдает useState, в котором есть массив, со значением счетчика в котором сидит ноль
    // со старта и функция которая содержит в себе новое значение - это новое значение фиксируется и
    //компонента перерисовывается. И useState нам возвращает не ноль а единицу с функцией которая
    //ждет новое значение, в соответствии react вызывает каждый раз компоненту, чтобы получить от нее
    //новый JSX
    //useState может сам оптимизировать, с помощью иницианализационного значения в виде другой
    //функции, которая и вернет результат.
    //useState не запомнит функцию, он просто вызовет ее. useState не умеет сохранять функцию
    // в переменной чтобы потом ее вызвать. Поэтому он вызовет функцию всего один раз и закинет
    // это значение в state как единственное значение.
    const [count, setCount] = useState<number>(generateCount)// [0, setCount(newValue) {}]

    //2ая хитрость useState касается функции.
    //Мы передаем setCounter - конкретное состояние, а можем передавать туда функции
    //changer функция которая что-то изменяет, но чтобы что-то изменить она должна
    //что-то получить, он получает в state значение, которое возвращаем и передаем в useState
    // функцию setCounter(changer)
    // const changer = (state: number) => {
    //     return state + 1
    // }

    return (
        <>
            <button onClick={() => {setCount(state => state + 1)}}>{"+"}</button>
            <span>{count}</span>
        </>
    );
}